# The Event Broker
apiVersion: eventing.knative.dev/v1
kind: Broker
metadata:
  name: brkr

---
# Debugging Trigger
apiVersion: eventing.knative.dev/v1
kind: Trigger
metadata:
  name: tmdbgr-brkr
spec:
  broker: brkr
  subscriber:
    ref:
      apiVersion: serving.knative.dev/v1
      kind: Service
      name: sockeye

---

apiVersion: v1
kind: Secret
metadata:
  name:  azure-queue-storage
type: Opaque
stringData:
  account_key: <ACCOUNT_KEY>

---


apiVersion: sources.triggermesh.io/v1alpha1
kind: AzureQueueStorageSource
metadata:
  name: sample
spec:
  accountName: <ACCOUNT_NAME>
  queueName: <QUEUE_NAME>

  accountKey:
    valueFromSecret:
      name: azure-queue-storage
      key: account_key

  sink:
    ref:
      apiVersion: eventing.knative.dev/v1
      kind: broker
      name: brkr
---

# The AWS Credentials secret
apiVersion: v1
kind: Secret
metadata:
  name: aws
type: Opaque
stringData:
  access_key_id: <POPULATE_ME>
  secret_access_key: <POPULATE_ME>

---

# The event source for our Aquasec events (SQS)
apiVersion: sources.triggermesh.io/v1alpha1
kind: AWSSQSSource
metadata:
  name: sample
spec:
  arn: <POPULATE_ME>

  auth:
    credentials:
      accessKeyID:
        valueFromSecret:
          name: aws
          key: access_key_id
      secretAccessKey:
        valueFromSecret:
          name: aws
          key: secret_access_key
  sink:
    ref:
      apiVersion: eventing.knative.dev/v1
      kind: Broker
      name: brkr

---

# The event source for our guardduty events (Service Bus Queue)
apiVersion: sources.triggermesh.io/v1alpha1
kind: AzureServiceBusQueueSource
metadata:
  name: sample
spec:
  queueID: <POPULATE_ME>
  auth:
    sasToken:
      connectionString:
        value: <POPULATE_ME>
  sink:
    ref:
      apiVersion: eventing.knative.dev/v1
      kind: Broker
      name: brkr

---

# The Cloud Guard event trigger for the CSNF standardization transformation
apiVersion: eventing.knative.dev/v1
kind: Trigger
metadata:
  name: cloudguard-transformation
spec:
  broker: brkr
  filter:
    attributes:
      type: com.microsoft.azure.servicebus.message
  subscriber:
    ref:
      apiVersion: flow.triggermesh.io/v1alpha1
      kind: Transformation
      name: cloudguard-transformation

---

# The Cloudguard CSNF event standardization transformation
apiVersion: flow.triggermesh.io/v1alpha1
kind: Transformation
metadata:
  name: cloudguard-transformation
spec:
  context:
  - operation: add
    paths:
    - key: type
      value: io.triggermesh.csnf.cloudguard.transformation
  sink:
    ref:
      apiVersion: eventing.knative.dev/v1
      kind: Broker
      name: brkr
  data:
  - operation: store
    paths:
    - key: $accountID
      value: Data.data.additionalDetails.tenantId
    - key: $eventGUID
      value: Data.data.resourceId
    - key: $eventName
      value: Data.data.additionalDetails.problemName
    - key: $eventShortDescription
      value: Data.data.additionalDetails.problemDescription
    - key: $eventStartTime
      value: Data.data.additionalDetails.firstDetected
    - key: $eventSeverity
      value: Data.data.additionalDetails.riskLevel
    - key: $eventStatus
      value: Data.data.additionalDetails.status
    - key: $resourceIdentifier
      value: Data.data.additionalDetails.resourceId
    - key: $resourceType
      value: Data.data.additionalDetails.resourceType
    - key: $resourceName
      value: Data.data.additionalDetails.resourceName
    - key: $resourceRegion
      value: Data.data.additionalDetails.region
    - key: $resourceZone
      value: Data.data.compartmentName
    - key: $providerAccountId
      value: Data.data.additionalDetails.tenantId
    - key: $resourceName
      value: Data.data.additionalDetails.resourceName
    - key: $resourceName
      value: Data.data.additionalDetails.resourceName

  - operation: delete
    paths:
    - key:

  - operation: add
    paths:
    - key: provider
      value: Oracle Cloud Infrastructure
    - key: providerType
      value: CSP
    - key: providerId
      value: "1"
    - key: source.sourceName
      value: Cloud Guard
    - key: source.sourceId
      value: none
    - key: provider.accountId
      value: $accountID
    - key: event.guid
      value: $eventGUID
    - key: event.name
      value: $eventName
    - key: event.shortDescription
      value: $eventShortDescription
    - key: event.startTime
      value: $eventStartTime
    - key: event.severity
      value: $eventSeverity
    - key: event.status
      value: $eventStatus
    - key: resource.identifier
      value: $resourceIdentifier
    - key: resource.type
      value: $resourceType
    - key: resource.name
      value: $resourceName
    - key: resource.region
      value: $resourceRegion
    - key: resource.zone
      value: $resourceZone

---

# The Aquasec event trigger for the CSNF standardization transformation
apiVersion: eventing.knative.dev/v1
kind: Trigger
metadata:
  name: aquasec-transformation
spec:
  broker: brkr
  filter:
    attributes:
      type: com.amazon.sqs.message
  subscriber:
    ref:
      apiVersion: flow.triggermesh.io/v1alpha1
      kind: Transformation
      name: aquasec-transformation

---

# The Aquasec CSNF event standardization transformation
apiVersion: flow.triggermesh.io/v1alpha1
kind: Transformation
metadata:
  name: aquasec-transformation
spec:
  sink:
    ref:
      apiVersion: eventing.knative.dev/v1
      kind: Broker
      name: brkr
  context:
  - operation: add
    paths:
    - key: type
      value: io.triggermesh.csnf.aquasec.transformation
  data:
  - operation: parse
    paths:
    - key: Body
      value: JSON
  - operation: store
    paths:
    - key: $control
      value: Body.control
    - key: $id
      value: Body.id
    - key: $hostid
      value: Body.hostid
    - key: $reason
      value: Body.reason
    - key: $time
      value: Body.time
    - key: $containerid
      value: Body.containerid
    - key: $category
      value: Body.category
    - key: $container
      value: Body.container
    - key: $region
      value: Body.vm_location
    - key: $image
      value: Body.image
    - key: $name
      value: Body.container
    - key: $guid
      value: Body.container

  - operation: delete
    paths:
    - key:

  - operation: add
    paths:
    - key: provider
      value: Aquasec
    - key: provider.providerType
      value: aquasec
    - key: provider.providerId
      value: $id
    - key: provider.accountId
      value: $id
    - key: provider.name
      value: SQS
    - key: source.sourceName
      value: Aquasec
    - key: source.sourceId
      value: none
    - key: event.guid
      value: $guid
    - key: event.name
      value: $name
    - key: event.shortDescription
      value: "an aquasec short description goes here"
    - key: event.startTime
      value: $time
    - key: event.severity
      value: HIGH
    - key: event.status
      value: OPEN
    - key: resource.identifier
      value: $id
    - key: resource.type
      value: something
    - key: resource.name
      value: $hostid
    - key: resource.region
      value: us-1-c
    - key: resource.zone
      value: us
    - key: image
      value: $image


---

# The Azure Defender event trigger for the CSNF standardization transformation
apiVersion: eventing.knative.dev/v1
kind: Trigger
metadata:
  name: azure-defender-transformation
spec:
  broker: brkr
  filter:
    attributes:
      type: com.microsoft.azure.queuestorage
  subscriber:
    ref:
      apiVersion: flow.triggermesh.io/v1alpha1
      kind: Transformation
      name: azure-defender-transformation

---

# The Azure Defender CSNF event standardization transformation
apiVersion: flow.triggermesh.io/v1alpha1
kind: Transformation
metadata:
  name: azure-defender-transformation
spec:
  sink:
    ref:
      apiVersion: eventing.knative.dev/v1
      kind: Broker
      name: brkr
  context:
  - operation: add
    paths:
    - key: type
      value: io.triggermesh.csnf.azure.defender.transformation
  data:
  - operation: parse
    paths:
    - key: Text
      value: JSON
  - operation: store
    paths:
    - key: $provider
      value: Azure Defender
    - key: $providerType
      value: Azure
    - key: $sourceName
      value: Azure Defender
    - key: $sourceId
      value: none
    - key: $providerAccountId
      value: Text.id
    - key: $eventGUID
      value: Text.id
    - key: $eventName
      value: Text.properties.alertName
    - key: $eventShortDescription
      value: Text.properties.description
    - key: $eventStartTime
      value: Text.properties.reportedTimeUtc
    - key: $eventSeverity
      value: Text.properties.extendedProperties.killChainIntent
    - key: $eventStatus
      value: Text.properties.state
    - key: $resourceIdentifier
      value: Text.properties.instanceId
    - key: $resourceType
      value: Text.type
    - key: $resourceName
      value: Text.properties.alertName
    - key: $resourceRegion
      value: us-east-1
    - key: $resourceZone
      value: us

  - operation: delete
    paths:
    - key:

  - operation: add
    paths:
    - key: provider
      value: $provider
    - key: providerType
      value: $providerType
    - key: providerId
      value: $providerId
    - key: source.sourceName
      value: $sourceName
    - key: source.sourceId
      value: $sourceId
    - key: provider.accountId
      value: $providerAccountId
    - key: event.guid
      value: $eventGUID
    - key: event.name
      value: $eventName
    - key: event.shortDescription
      value: $eventShortDescription
    - key: event.startTime
      value: $eventStartTime
    - key: event.severity
      value: $eventSeverity
    - key: event.status
      value: $eventStatus
    - key: resource.identifier
      value: $resourceIdentifier
    - key: resource.type
      value: $resourceType
    - key: resource.name
      value: $resourceName
    - key: resource.region
      value: $resourceRegion
    - key: resource.zone
      value: $resourceZone

---

# The Aquasec event trigger for the CSNF Dockerhub event decoration transformation
apiVersion: eventing.knative.dev/v1
kind: Trigger
metadata:
  name: csnf-dockerhub-decorator-aquasec
spec:
  broker: brkr
  filter:
    attributes:
      type: io.triggermesh.csnf.aquasec.transformation
  subscriber:
    ref:
      apiVersion: serving.knative.dev/v1
      kind: Service
      name: csnf-dockerhub-decorator

---

# The CSNF Dockerhub event decoration transformation
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: csnf-dockerhub-decorator
spec:
  template:
    spec:
      containers:
        - image: gcr.io/triggermesh/csnfdockerhubdecorator:latest
          env:
          - name: K_SINK
            # Put the Broker `brkr` url here.
            value: <POPULATE_ME> 

---

# The Azure Sentinel Trigger to propogate the Aquasec CSNF events into the Sentinel Target
apiVersion: eventing.knative.dev/v1
kind: Trigger
metadata:
  name: sentinel-aquasec
spec:
  broker: brkr
  filter:
    attributes:
      type: io.triggermesh.csnf.aquasec.transformation
  subscriber:
    ref:
      apiVersion: serving.knative.dev/v1
      kind: Service
      name: hello-sentinel

---

# The Azure Sentinel Trigger to propogate the Cloudguard CSNF events into the Sentinel Target
apiVersion: eventing.knative.dev/v1
kind: Trigger
metadata:
  name: sentinel-cloudguard
spec:
  broker: brkr
  filter:
    attributes:
      type: io.triggermesh.csnf.cloudguard.transformation
  subscriber:
    ref:
      apiVersion: serving.knative.dev/v1
      kind: Service
      name: hello-sentinel

---

# The Azure Defender Trigger to propogate the Azure Defender CSNF events into the Sentinel Target
apiVersion: eventing.knative.dev/v1
kind: Trigger
metadata:
  name: sentinel-defender
spec:
  broker: brkr
  filter:
    attributes:
      type: io.triggermesh.csnf.azure.defender.transformation
  subscriber:
    ref:
      apiVersion: serving.knative.dev/v1
      kind: Service
      name: hello-sentinel

---

# The Azure Sentinel Target
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: hello-sentinel
spec:
  template:
    spec:
      containers:
        - image: gcr.io/triggermesh/azuresentineltarget:latest
          env:
          - name: AZURE_SUBSCRIPTION_ID
            value: <POPULATE_ME>
          - name: AZURE_RESOURCE_GROUP
            value: <POPULATE_ME>
          - name: AZURE_WORKSPACE
            value: <POPULATE_ME>
          - name: AZURE_CLIENT_SECRET
            value: <POPULATE_ME>
          - name: AZURE_CLIENT_ID
            value: <POPULATE_ME>
          - name: AZURE_TENANT_ID
            value: <POPULATE_ME>

---

# The Splunk Target
apiVersion: targets.triggermesh.io/v1alpha1
kind: SplunkTarget
metadata:
    name: splunk-distribution
spec:
    endpoint: <POPULATE_ME>
    skipTLSVerify: true
    token:
        valueFromSecret:
            key: token
            name: splunk-hec

---

# The Splunk Trigger to propogate the Dockerhub decorated events into the Splunk Target
apiVersion: eventing.knative.dev/v1
kind: Trigger
metadata:
  name: dockerhub-splunk
spec:
  broker: brkr
  filter:
    attributes:
      type: io.triggermesh.csnf.aquasec.transformation.dockerhub.decorated
  subscriber:
    ref:
      apiVersion: targets.triggermesh.io/v1alpha1
      kind: SplunkTarget
      name: splunk-distribution

---

# The Splunk Trigger to propogate the CloudGuard decorated events into the Splunk Target
apiVersion: eventing.knative.dev/v1
kind: Trigger
metadata:
  name: cloudguard-splunk
spec:
  broker: brkr
  filter:
    attributes:
      type: io.triggermesh.csnf.cloudguard.transformation
  subscriber:
    ref:
      apiVersion: targets.triggermesh.io/v1alpha1
      kind: SplunkTarget
      name: splunk-distribution

---

# The Splunk Trigger to propogate the Azure Defender events into the Splunk Target
apiVersion: eventing.knative.dev/v1
kind: Trigger
metadata:
  name: defender-splunk
spec:
  broker: brkr
  filter:
    attributes:
      type: io.triggermesh.csnf.azure.defender.transformation
  subscriber:
    ref:
      apiVersion: targets.triggermesh.io/v1alpha1
      kind: SplunkTarget
      name: splunk-distribution

---

# The Splunk Secret
apiVersion: v1
kind: Secret
metadata:
  name: splunk-hec
data:
  token: <POPULATE_ME>
type: Opaque

---

# The Sockeye debugging tool
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: sockeye
spec:
  template:
    spec:
      containers:
        - image: docker.io/n3wscott/sockeye:v0.7.0@sha256:e603d8494eeacce966e57f8f508e4c4f6bebc71d095e3f5a0a1abaf42c5f0e48
        
---

# The Terrafrom Funcion Trigger to propogate the Cloud Guard events into the Search Function
apiVersion: eventing.knative.dev/v1
kind: Trigger
metadata:
  name: paths
spec:
  broker: brkr
  filter:
    attributes:
      type:  io.triggermesh.csnf.cloudguard.transformation
  subscriber:
    ref:
      apiVersion: serving.knative.dev/v1
      kind: Service
      name: paths

---

# Creates a Paths adapter, allowing us to easily filter events baised upon a simple JS expression/evaluation 
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: paths
spec:
  template:
    spec:
      containers:
        - image: gcr.io/triggermesh/paths:latest
          env:
            - name: PATH_A_CONTINUE_IF
              value: (event.event.name === "SCANNED_HOST_VULNERABILITY")
            - name: PATH_A_CONTINUE_PATH
              value: http://broker-ingress.knative-eventing.svc.cluster.local/default/brkr
            - name: PATH_A_CONTINUE_TYPE
              value: io.triggermesh.terraform.reinit
            - name: PATH_B_CONTINUE_IF
              value: (event.event.name === "CONFIG_CHANGE")
            - name: PATH_B_CONTINUE_PATH
              value: http://broker-ingress.knative-eventing.svc.cluster.local/default/brkr
            - name: PATH_B_CONTINUE_TYPE
              value: io.triggermesh.terraform.start
            - name: DEFAULT_CONTINUE_PATH
              value: http://broker-ingress.knative-eventing.svc.cluster.local/default/brkr
            - name: DEFAULT_CONTINUE_TYPE
              value: io.triggermesh.paths.ContinuePath.default

---

# The Terraform Target Trigger to propogate the filtered CloudGuard events into the Target. 
apiVersion: eventing.knative.dev/v1
kind: Trigger
metadata:
  name: terraform-reinit
spec:
  broker: brkr
  filter:
    attributes:
      type:  io.triggermesh.terraform.reinit
  subscriber:
    ref:
      apiVersion: serving.knative.dev/v1
      kind: Service
      name: terraform-target

---

# A service account to allow Terraform to perfrom actions
apiVersion: v1
kind: ServiceAccount
metadata:
  name: teraform
  
---

# Cluster Role for the same reasons mentioned above
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: teraform
rules:
  - apiGroups:
      - apps
    resources:
      - deployments
    verbs:
      - get
      - list
      - watch
      - create
      - delete
      - patch
      - update
---

# ...
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: teraform
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: teraform
subjects:
  - kind: ServiceAccount
    name: teraform
    # UPDATE THIS TO MATCH YOUR NAMESPACE:
    namespace: default

---

# terraform-target exposes a Terraform Target that accepts a terraform plan in the spec 
# and will launch this plan when it recieves an event. This is HIGHLY POC/WIP work at the moment.
# currently we are just creating a simple deployment.  
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: terraform-target
spec:
  template:
    spec:
      serviceAccountName: teraform
      containers:
        - image: gcr.io/triggermesh/terraformtarget:latest
          env:
          - name: TERAFORMTARGET_WORKING_DIR
            value: /
          - name: TERAFORMTARGET_TERRAFORM_PLAN
            value: |-
              provider "kubernetes" {
                # Context to choose from the config file. use only for local development
                # config_path    = "/project/cmd/"
                # config_context = "arn:aws:eks:us-west-2:043455440429:cluster/tmkongdemo"
              }
              #-----------------------------------------
              # KUBERNETES DEPLOYMENT COLOR APP
              #-----------------------------------------
              resource "kubernetes_deployment" "color" {
                  metadata {
                      name = "color-blue-dep"
                      labels = {
                          app   = "color"
                          color = "blue"
                      } //labels
                  } //metadata

                  spec {
                      selector {
                          match_labels = {
                              app   = "color"
                              color = "blue"
                          } //match_labels
                      } //selector
                      #Template for the creation of the pod
                      template {
                          metadata {
                              labels = {
                                  app   = "color"
                                  color = "blue"
                              } //labels
                          } //metadata
                          spec {
                              container {
                                  image = "itwonderlab/color"   #Docker image name
                                  name  = "color-blue"          #Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL).

                                  #Block of string name and value pairs to set in the containers environment
                                  env {
                                      name = "COLOR"
                                      value = "blue"
                                  } //env

                                  #List of ports to expose from the container.
                                  port {
                                      container_port = 8080
                                  }//port
                              } //container
                          } //spec
                      } //template
                  } //spec
              } //resource

